Note that register pairs are fixed to have their high byte stored in a
register rX and their low byte stored in another register r(X + 1) such
that X is an even number.  

Here are some example register pairs:  r0p (high byte r0, low byte r1), 
  r2p (high byte r2, low byte r3), r4p (high byte r4, low byte r5), etc.


Special register pairs:  
  1)  The link register's two bytes are stored in the register pair r14p
  (enforced by the hardware, but only relevant to the call and calli
  instructions).  If there is ever an assembler for this CPU, "lr" (without
  quotes) will be an alias for "r14p" (without quotes).
  2)  As an ASSEMBLER CONVENTION, the stack pointer's two bytes are stored
  in the register pair r12p.  If there is ever an assembler for this
  CPU, "sp" (without quotes) will be an alias for "r12p" (without
  quotes).



Instruction encodings:

Group 1 (Non-branching instructions with 8-bit immediate values):  
  Encoding:  0ooo aaaa iiii iiii
  Encoding description:  op (o); 
    register rA, or reg pair r(aaaa/2)p [denoted rAp, so the least
    significant bit of aaaa is ignored] (a); 
    8-bit immediate value (i)
  Instructions:  
    Arithmetic instructions:
      1. addi (ADD 8-bit Immediate value to reg Pair rAp)
      2. subi (SuBtract 8-bit Immediate value from reg Pair rAp)
      3. cmpi (CoMPare reg pair rAp to 8-bit Immediate value)
      
    Bitshifting instructions with two operands (rAp and 8-bit Immediate
    value):
      4. lsli
      5. lsri
      6. asri
      
    Copy instructions:
      7. cpybi (CoPY Byte Immediate to register rA)


Group 2 (The instruction group with the most opcodes):  
  Encoding:  10oo oooo aaaa bbbb
  Encoding description:  op (o); 
    register rA, or reg pair r(aaaa/2)p [denoted rAp, so the least
    significant bit of aaaa is ignored] (a); 
    register rB, or reg pair r(bbbb/2)p [denoted rBp, so the least
    significant bit of bbbb is ignored] (b)
  Instructions:  
    -- rA, rB --
    
    Copy instructions:
    (CoPY from reg rB to reg rA)
      cpyb
    
    
    -- rAp --
    Complement instructions with one reg pair operand (rB ignored):
      inv (one's complement of rAp)
      neg (two's complement of rAp)
    
    Bit rotating instructions that use carry as bit 16 for a 17-bit
    rotate of { carry, rAp } by one bit:
      rolc
      rorc
    
    Call instruction (Description:  sets the link register to the
    return address, then sets the program counter to the address
    contained in the reg pair rAp):
      call (CALL subroutine at address in reg pair rAp)
      
    
    PC Copy Instructions:
      cpyfrpc (CoPY FRom PC to reg pair rAp (this can be used for
      pc-relative loads and stores))
      
      jump (Copy rAp to the pc)
    
    Extra Interrupt Instructions:
      swpira (Swap the Interrupt Return Address and rAp)
      cpyira (CoPY the Interrupt Return Address to rAp)
      
    Flags Instructions:
      cpyfrf (Clear reg rAp, then CoPY FRom Flags to reg rAp)
      cpytof (CoPY TO Flags from reg rAp)
      
      ldfab (Add 1 to the reg pair rAp, then LoaD a byte, from the updated
      address in rAp, containing processor Flags (other bits cleared) into
      the processor flags)
      
      stfsa (STore a byte containing the current processor flags (other
      bits cleared) to memory at address contained in reg pair rAp, then
      Subtract 1 from the reg pair rAp)
    
    
    
    -- rA, rBp --
    8-bit Load/store instructions:
      ldr (LoaD contents into Register rA from memory at address in rBp)
      str (STore Register rA contents to memory at address in rBp)
    
    
    
    -- rAp, rBp --
    
    Arithmetic instructions:
      add
      adc
      sub
      sbc
      cmp
      umull (Unsigned MULtiplies rAp and rBp and stores 32-bit result in
      r0p:r2p)
      smull (Signed MULtiplies rAp and rBp and stores 32-bit result in
      r0p:r2p)
    
    Bitwise instructions with two reg pair operands:
      and
      tst (same thing as "and" but only affects flags)
      orr
      xor
    
    Bitshifting (and rotating) instructions that do a 16-bit shift
    or rotate on the reg pair rAp, using rBp as the number of bits to
    shift by:
      lsl
      lsr
      asr
      rol
      ror
    
    (CoPY from reg pair rBp to reg Pair rAp)
      cpy
   
    16-bit Load/store instructions:
      ldp (LoaD contents into reg Pair rAp from memory at address in rBp)
      stp (STore reg Pair rAp contents to memory at address in rBp)
    
    16-bit Push/pop style instructions:
      ldpab (Add 1 the reg pair rBp, then LoaD contents into reg pair rAp
      from memory at address contained in reg pair rBp)
    
      stpsa (STore reg Pair rAp to memory at address contained in reg pair
      rBp, then Subtract 1 from the reg pair rBp)
    
    
    
    
    -- no args --
    Interrupt instructions (these ignore BOTH rA and rB):
      
      eni (ENable Interrupts)
      dii (DIsable Interrupts)
      reti (Set the PC to interrupt RETurn address and enable Interrupts)
      jumpira (Set the PC to the Interrupt Return Address, but DON'T enable
      interrupts)





Group 3 (Instructions with one register and two register pairs):  
  Encoding:  1100 ooaa aabb bccc
  Encoding description:  op (o); register rA or reg pair r(aaaa/2)p (a); 
    reg pair rBp [not always used] (b); reg pair rCp (c); 
    high byte of 16-bit immediate value (i);
    low byte of 16-bit immediate value (j);
  Instructions:
    Indexed Load/store instructions:
      1. ldrx (Load 8-bit value from memory at address [rBp + rCp] into rA)
      2. strx (Store rA to memory at address [rBp + rCp])
      3. ldpx (Load 16-bit value from memory at address [rBp + rCp] into
      rAp)
      4. stpx (Store rAp to memory at address [rBp + rCp])


Group 4 (Branching instructions):  
  Encoding:  1101 oooo iiii iiii
  Encoding description:  op (o); immediate value (i)
  Instructions:
    Branching instructions (note that iiii iiii is a SIGNED 8-bit integer):
      1. bra (branch always)
      2. bnv (branch never, a form of NOP)
      3. bne (branch when Z == 0)
      4. beq (branch when Z == 1)
      5. bcc (branch when C == 0 [unsigned less than])
      6. bcs (branch when C == 1 [unsigned greater than or equal])
      7. bls (branch when ( C == 0 or Z == 1 ) 
      [unsigned less than or equal])
      8. bhi (branch when ( C == 1 and Z == 0 ) 
      [unsigned greater than])
      9. bpl (branch when N == 0)
      10. bmi (branch when N == 1)
      11. bvc (branch when V == 0)
      12. bvs (branch when V == 1)
      13. bge (branch when N == V [signed greater than or equal])
      14. blt (branch when N != V [signed less than])
      15. bgt (branch when ( N == V and Z == 0 ) [signed greater than])
      16. ble (branch when ( N != V or Z == 1 ) 
      [signed less than or equal])


Group 5 (Instructions encoded with four bytes instead of two so that there
can be 16-bit immediate values):  
  Encoding:  1110 00oo oaaa abbb   iiii iiii jjjj jjjj
  Encoding description:  op (o); 
    register rA, or reg pair r(aaaa/2)p [denoted rAp, so the least
    significant bit of aaaa is ignored] (a); 
    reg pair rBp [not always used] (b);  
    high byte of 16-bit immediate value (i);
    low byte of 16-bit immediate value (j);
  Instructions:
    Extended copy instructions:
      1. cpyi (COPY Immediate, which sets the a register pair rAp
      to a 16-bit value in one instruction)
      2. jumpi (Sets the PC to a 16-bit immediate value)
    Call instructions
      3. calli (CALL Immediate, which sets the link register to the
      return address, then sets the program counter to the destination
      address)
    Indexed Load/store instructions:
      4. ldrxi (Load 8-bit value from memory at address [rBp + 16-bit
      Immediate value] into rA)
      5. strxi (Store rA to memory at address [rBp + 16-bit Immediate
      value])
      6. ldpxi (Load 16-bit value from memory at address [rBp + 16-bit
      Immediate value] into rAp)
      7. stpxi (Store rAp to memory at address [rBp + 16-bit Immediate
      value])

